ART_URL = 'https://conanv2beta.jfrog.io/artifactory/api/conan/conan'

void cancelPrevious() {
    stage("Cancelling previous") {
        def buildNumber = env.BUILD_NUMBER as int
        if (buildNumber > 1) milestone(buildNumber - 1)
        milestone(buildNumber)
    }
}

LINUX_CONTAINER = 'conanio/gcc10'

def envInside(Map ctxt, Closure closure) {
    String venvDirectory = isUnix() ? "${pwd()}/conanenv" : "${pwd()}\\conanenv"
    String binPath = isUnix() ? "$venvDirectory/bin/" : "$venvDirectory\\Scripts\\"
    String conanHome = isUnix() ? "${pwd()}/.conan" : "${pwd()}\\.conan"
    withEnv(["PATH+EXTRA=${binPath}", "CONAN_USER_HOME=${conanHome}", "CONAN_USER_HOME_SHORT=${conanHome}"]) {
        // This doesn't work if running docker.inside (https://issues.jenkins.io/browse/JENKINS-49076)
        closure()
    }
}

def envCreate(Map ctxt) {
    String venvDirectory = isUnix() ? "${pwd()}/conanenv" : "${pwd()}\\conanenv"
    String binPath = isUnix() ? "$venvDirectory/bin/" : "$venvDirectory\\Scripts\\"
    ctxt.shFunction("${ctxt.python_host} --version")
    if (ctxt.isInsideDocker) {
        // Alternate implementation because of https://issues.jenkins.io/browse/JENKINS-49076
        // Always install latest pre-release
        ctxt.shFunction("pip install conan --pre --upgrade")
    }
    else {
        ctxt.shFunction("${ctxt.python_host} -m venv $venvDirectory")
        ctxt.shFunction("${binPath}python -m pip install -U pip")
        // Always install latest pre-release
        ctxt.shFunction("${binPath}python -m pip install conan --pre --upgrade")
    }
}

def runExamples(Map ctxt, List examplesToRun) {
    try {
        stage('Checkout SCM') {
            checkout scm
        }

        stage('Configure environment') {
            envCreate(ctxt)
            envInside(ctxt) {
                ctxt.shFunction('cmake --version')
                ctxt.shFunction('conan --version')
            }
        }

        stage("Run example") {
            envInside(ctxt) {
                ctxt.shFunction('conan profile detect --force')
                ctxt.shFunction('conan remote remove conancenter')
                ctxt.shFunction("conan remote add conancenterv2 ${ART_URL}")
                for (example in examplesToRun) {
                    ctxt.shFunction("${example}")
                }
            }
        }
    }
    finally {
        stage("CleanWS") {
            cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true,
                    cleanWhenSuccess: true, cleanWhenUnstable: true, disableDeferredWipeout: true, deleteDirs: true,
                    notFailBuild: true)
        }
    }
}

node('Linux') {
    
    cancelPrevious() 
    
    List<String> shExamples = []
    List<String> batExamples = []
    stage('Find examples') {
        checkout scm
        def examples = sh(script: 'find . -name run_example.*', returnStdout: true).readLines()
        for (example in examples) {
            if (example.contains(".sh")) {
                shExamples.add(example)
            }
            else if (example.contains(".bat")) {
                batExamples.add(example)
            }
        }
        echo "sh examples: ${shExamples.join(', ')}"
        echo "bat examples: ${batExamples.join(', ')}"
    }

    stage('Run examples') {
        parallel(
            linux: {
                stage('Run Linux examples') {
                    docker.image(LINUX_CONTAINER).inside {
                        runExamples([python_host: 'python3',
                                     shFunction: { data -> sh(data) },
                                     isInsideDocker: true],
                                     shExamples)
                    }
                }
            },
            macos: {
                 node('Macos') {
                    stage('Run Macos examples') {
                        withEnv(['PATH+EXTRA=/usr/local/bin']) { // Required to find CMake
                            runExamples([python_host: 'python3',
                                         shFunction: { data -> sh(data) },
                                         isInsideDocker: false],
                                         shExamples)
                        }
                    }
                 }
             },
             windows: {
                 node('Windows') {
                    stage('Run Windows examples') {
                        runExamples([python_host: 'C:\\Python39\\python.exe',
                                     shFunction: { data -> bat(data) },
                                     isInsideDocker: false],
                                     batExamples)
                    }
                 }
             }
        )
    }
}